1. What is PL/SQL, and how is it different from SQL?
2. What are anonymous blocks in PL/SQL, and when might you use them?
3. List some common data types in PL/SQL and give an example of each.
4. What are control structures in PL/SQL, and why are they important?
5. Whatâ€™s the difference between DML and DDL in SQL? Can you give examples of each?

1. PL/SQL vs. SQL
SQL (Structured Query Language): SQL is a declarative language designed for querying and manipulating data in relational databases. It focuses on what you want to achieve, not how to achieve it. Think of it as giving instructions like “Get me all customers from California.”
PL/SQL (Procedural Language/SQL): PL/SQL is an extension of SQL that adds procedural programming capabilities. It allows you to write more complex logic, including variables, control structures (like loops and conditional statements), and functions. It’s like adding a “how-to” guide to your SQL instructions.

2. Anonymous Blocks in PL/SQL
Anonymous Blocks: These are PL/SQL code blocks that are not named and are executed immediately. They are useful for short, self-contained tasks.
When to use them:
Quick calculations or data manipulation: You might use an anonymous block to perform a one-time calculation or update a few rows in a table.
Testing code snippets: You can write and execute small pieces of PL/SQL code within an anonymous block to test their functionalit


4. Control Structures in PL/SQL
Control Structures: These are statements that control the flow of execution in your PL/SQL code. They allow you to make decisions, repeat actions, and handle different scenarios.
Why they are important:
Logic and Flexibility: Control structures enable you to write more complex and dynamic PL/SQL code.
Code Reusability: They help you create reusable code blocks that can be called from different parts of your application.
Common Control Structures:
IF-THEN-ELSE: Executes different code blocks based on a condition.
LOOP: Repeats a block of code until a condition is met.
FOR LOOP: Iterates over a range of values.
CASE: Selects a code block to execute based on a value.

5. DML vs. DDL in SQL
DML (Data Manipulation Language): DML statements are used to modify data within tables.
DDL (Data Definition Language): DDL statements are used to define and modify the structure of your database (tables, indexes, etc.).
Examples:
DML:
INSERT INTO customers (name, email) VALUES ('John Doe', 'john.doe@example.com'); (Inserts a new customer)
UPDATE customers SET email = 'john.doe@newdomain.com' WHERE name = 'John Doe'; (Updates a customer’s email)
DELETE FROM customers WHERE customer_id = 123; (Deletes a customer)
DDL:
CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255)); (Creates a new table)
ALTER TABLE customers ADD COLUMN phone VARCHAR(20); (Adds a new column to a table)
DROP TABLE customers; (Deletes a table)


